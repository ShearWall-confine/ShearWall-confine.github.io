name: Deploy to GitHub Pages (Simple)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Generate GitHub Secrets Config
      env:
        ADMIN_PASSWORD_HASH: ${{ secrets.ADMIN_PASSWORD_HASH }}
        EDITOR_PASSWORD_HASH: ${{ secrets.EDITOR_PASSWORD_HASH }}
        VIEWER_PASSWORD_HASH: ${{ secrets.VIEWER_PASSWORD_HASH }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
      run: |
        echo "🔐 生成GitHub Secrets配置文件..."
        
        # 生成 github-secrets-config.js
        cat > github-secrets-config.js << 'EOF'
        /**
         * GitHub Secrets 配置文件
         * 此文件在GitHub Actions构建时会被动态生成
         * 包含从GitHub Secrets获取的密码哈希值
         * 生成时间: $(date)
         */
        
        // 这些值从GitHub Secrets中注入
        window.GITHUB_SECRETS = {
          ADMIN_PASSWORD_HASH: '${{ secrets.ADMIN_PASSWORD_HASH }}',
          EDITOR_PASSWORD_HASH: '${{ secrets.EDITOR_PASSWORD_HASH }}',
          VIEWER_PASSWORD_HASH: '${{ secrets.VIEWER_PASSWORD_HASH }}',
          JWT_SECRET: '${{ secrets.JWT_SECRET }}',
          ENCRYPTION_KEY: '${{ secrets.ENCRYPTION_KEY }}'
        };
        
        // 开发环境回退值（当GitHub Secrets未设置时使用）
        if (!window.GITHUB_SECRETS.ADMIN_PASSWORD_HASH || 
            window.GITHUB_SECRETS.ADMIN_PASSWORD_HASH.includes('secrets.')) {
          console.warn('⚠️ 使用开发环境配置，请设置GitHub Secrets');
          window.GITHUB_SECRETS = {
            ADMIN_PASSWORD_HASH: 'dev_admin_hash',
            EDITOR_PASSWORD_HASH: 'dev_editor_hash', 
            VIEWER_PASSWORD_HASH: 'dev_viewer_hash',
            JWT_SECRET: 'dev_jwt_secret',
            ENCRYPTION_KEY: 'dev_encryption_key'
          };
        }
        
        // 导出到全局
        if (typeof module !== 'undefined' && module.exports) {
          module.exports = window.GITHUB_SECRETS;
        }
        EOF
        
        # 生成 user-config.js
        cat > user-config.js << 'EOF'
        /**
         * 用户配置文件
         * 包含完整的用户信息和权限配置
         * 生成时间: $(date)
         */
        
        const USER_CONFIG = {
          defaultUsers: {
            'admin': {
              username: 'admin',
              role: 'admin',
              name: '系统管理员',
              email: 'admin@example.com',
              passwordHash: '${{ secrets.ADMIN_PASSWORD_HASH }}'
            },
            'editor': {
              username: 'editor', 
              role: 'editor',
              name: '编辑者',
              email: 'editor@example.com',
              passwordHash: '${{ secrets.EDITOR_PASSWORD_HASH }}'
            },
            'viewer': {
              username: 'viewer',
              role: 'viewer', 
              name: '查看者',
              email: 'viewer@example.com',
              passwordHash: '${{ secrets.VIEWER_PASSWORD_HASH }}'
            }
          }
        };
        
        // 密码验证函数
        function verifyPassword(inputPassword, storedHash) {
          // 这里应该使用与generate-secrets.py相同的哈希算法
          // 目前仅用于开发环境，生产环境应使用服务器端验证
          return true; // 临时返回true，实际应验证哈希
        }
        
        // 导出函数
        if (typeof module !== 'undefined' && module.exports) {
          module.exports = {
            USER_CONFIG,
            verifyPassword
          };
        } else {
          // 浏览器环境
          window.USER_CONFIG = USER_CONFIG;
          window.verifyPassword = verifyPassword;
        }
        EOF
        
        echo "✅ 配置文件生成完成"
        
    - name: Verify Secrets Injection
      run: |
        echo "🔍 验证GitHub Secrets注入..."
        
        # 检查 github-secrets-config.js
        if grep -q "ADMIN_PASSWORD_HASH.*secrets" github-secrets-config.js; then
          echo "✅ GitHub Secrets配置已正确注入"
        else
          echo "❌ GitHub Secrets配置注入失败"
          exit 1
        fi
        
        # 检查 user-config.js
        if grep -q "ADMIN_PASSWORD_HASH" user-config.js; then
          echo "✅ 用户配置文件已正确生成"
        else
          echo "❌ 用户配置文件生成失败"
          exit 1
        fi
        
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./
        
    - name: Verify Deployment
      run: |
        echo "🚀 部署验证完成"
        echo "GitHub Pages URL: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
