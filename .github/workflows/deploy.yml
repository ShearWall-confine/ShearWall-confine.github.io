name: Deploy to GitHub Pages with Secrets

on:
  push:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    # 每天凌晨2点自动更新配置（可选）
    - cron: '0 2 * * *'

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
      actions: read
      checks: write
      pull-requests: write
      statuses: write
      security-events: write
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        echo "📦 安装项目依赖..."
        npm install --package-lock-only
        echo "✅ 依赖安装完成"
        
    - name: Generate GitHub Secrets Config
      env:
        ADMIN_PASSWORD_HASH: ${{ secrets.ADMIN_PASSWORD_HASH }}
        EDITOR_PASSWORD_HASH: ${{ secrets.EDITOR_PASSWORD_HASH }}
        VIEWER_PASSWORD_HASH: ${{ secrets.VIEWER_PASSWORD_HASH }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
      run: |
        echo "🔐 生成GitHub Secrets配置文件..."
        
        # 生成 github-secrets-config.js
        cat > github-secrets-config.js << 'EOF'
        /**
         * GitHub Secrets 配置文件
         * 此文件在GitHub Actions构建时会被动态生成
         * 包含从GitHub Secrets获取的密码哈希值
         * 生成时间: $(date)
         */
        
        // 这些值从GitHub Secrets中注入
        window.GITHUB_SECRETS = {
          ADMIN_PASSWORD_HASH: '${{ secrets.ADMIN_PASSWORD_HASH }}',
          EDITOR_PASSWORD_HASH: '${{ secrets.EDITOR_PASSWORD_HASH }}',
          VIEWER_PASSWORD_HASH: '${{ secrets.VIEWER_PASSWORD_HASH }}',
          JWT_SECRET: '${{ secrets.JWT_SECRET }}',
          ENCRYPTION_KEY: '${{ secrets.ENCRYPTION_KEY }}'
        };
        
        // 生产环境检查（不允许开发环境回退）
        if (!window.GITHUB_SECRETS.ADMIN_PASSWORD_HASH || 
            window.GITHUB_SECRETS.ADMIN_PASSWORD_HASH.includes('secrets.')) {
          console.error('❌ GitHub Secrets未正确配置，部署失败');
          throw new Error('GitHub Secrets未配置，请设置生产环境密钥');
        }
        
        // 导出到全局
        if (typeof module !== 'undefined' && module.exports) {
          module.exports = window.GITHUB_SECRETS;
        }
        EOF
        
        # 生成 user-config.js
        cat > user-config.js << 'EOF'
        /**
         * 用户配置文件
         * 包含完整的用户信息和权限配置
         * 生成时间: $(date)
         */
        
        const USER_CONFIG = {
          defaultUsers: {
            'admin': {
              username: 'admin',
              role: 'admin',
              name: '系统管理员',
              email: 'admin@example.com',
              passwordHash: '${{ secrets.ADMIN_PASSWORD_HASH }}'
            },
            'editor': {
              username: 'editor', 
              role: 'editor',
              name: '编辑者',
              email: 'editor@example.com',
              passwordHash: '${{ secrets.EDITOR_PASSWORD_HASH }}'
            },
            'viewer': {
              username: 'viewer',
              role: 'viewer', 
              name: '查看者',
              email: 'viewer@example.com',
              passwordHash: '${{ secrets.VIEWER_PASSWORD_HASH }}'
            }
          }
        };
        
        // PBKDF2 密码验证函数
        async function verifyPBKDF2(password, salt, hash) {
          try {
            // 将 salt 从 hex 转换为 Uint8Array
            const saltBytes = new Uint8Array(salt.match(/.{1,2}/g).map(byte => parseInt(byte, 16)));
            
            // 导入密码
            const keyMaterial = await crypto.subtle.importKey(
              'raw',
              new TextEncoder().encode(password),
              { name: 'PBKDF2' },
              false,
              ['deriveBits']
            );
            
            // 使用 PBKDF2 派生密钥
            const derivedBits = await crypto.subtle.deriveBits(
              {
                name: 'PBKDF2',
                salt: saltBytes,
                iterations: 10000,
                hash: 'SHA-512'
              },
              keyMaterial,
              512 // 512 bits = 64 bytes
            );
            
            // 将结果转换为 hex 字符串
            const derivedHash = Array.from(new Uint8Array(derivedBits))
              .map(b => b.toString(16).padStart(2, '0'))
              .join('');
            
            return derivedHash === hash;
          } catch (error) {
            console.error('PBKDF2 验证失败:', error);
            return false;
          }
        }
        
        // 密码验证函数
        async function verifyPassword(inputPassword, storedHash) {
          try {
            // 检查是否是 PBKDF2 格式（salt:hash）
            if (storedHash.includes(':')) {
              const [salt, hash] = storedHash.split(':');
              if (!salt || !hash) {
                console.error('无效的哈希格式');
                return false;
              }
              
              // 使用 PBKDF2 算法验证
              return await verifyPBKDF2(inputPassword, salt, hash);
            }
            
            // 回退到 simpleHash 验证（开发环境）
            if (typeof window !== 'undefined' && window.simpleHash) {
              return window.simpleHash(inputPassword) === storedHash;
            }
            
            console.warn('⚠️ 无法验证密码：未知的哈希格式');
            return false;
          } catch (error) {
            console.error('密码验证失败:', error);
            return false;
          }
        }
        
        // 导出函数
        if (typeof module !== 'undefined' && module.exports) {
          module.exports = {
            USER_CONFIG,
            verifyPassword
          };
        } else {
          // 浏览器环境
          window.USER_CONFIG = USER_CONFIG;
          window.verifyPassword = verifyPassword;
        }
        EOF
        
        echo "✅ 配置文件生成完成"
        
    - name: Verify Files Generated
      run: |
        echo "🔍 检查生成的文件..."
        
        # 检查文件是否存在
        if [ -f "github-secrets-config.js" ] && [ -f "user-config.js" ]; then
          echo "✅ 配置文件已生成"
          echo "文件列表："
          ls -la *.js
        else
          echo "❌ 配置文件生成失败"
          exit 1
        fi
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
        
    - name: Verify Deployment
      run: |
        echo "🚀 部署验证完成"
        echo "GitHub Pages URL: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
        echo "🔧 当前使用开发环境配置"
        echo "📝 要使用生产环境，请设置GitHub Secrets"
